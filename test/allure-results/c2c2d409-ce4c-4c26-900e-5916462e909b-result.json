{"name": "test_student_registration_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : D:\\lesson_5\\test/test/pictures/if-and-if-else.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55d0230b8013 <unknown>\n#1 0x55d022e1aa08 <unknown>\n#2 0x55d022e49dd6 <unknown>\n#3 0x55d022e6e932 <unknown>\n#4 0x55d022e456d3 <unknown>\n#5 0x55d022e6ea3e <unknown>\n#6 0x55d022e81b94 <unknown>\n#7 0x55d022e6e823 <unknown>\n#8 0x55d022e4408a <unknown>\n#9 0x55d022e451e5 <unknown>\n#10 0x55d0230e5e5d <unknown>\n#11 0x55d0230ff061 <unknown>\n#12 0x55d0230e7bb5 <unknown>\n#13 0x55d0230ffe08 <unknown>\n#14 0x55d0230db2f0 <unknown>\n#15 0x55d02311b988 <unknown>\n#16 0x55d02311bb08 <unknown>\n#17 0x55d0231355dd <unknown>\n#18 0x7fb748488609 <unknown>\n\nScreenshot: file://C:\\Users\\Airon\\.selene\\screenshots\\1680408523604\\1680408523605.png\nPageSource: file://C:\\Users\\Airon\\.selene\\screenshots\\1680408523604\\1680408523605.html", "trace": "fn = <selene.core.wait.Command object at 0x000001D8B8BD3250>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x000001D8B8BD3250>\nentity = <selene.core.entity.Element object at 0x000001D8B8BD21D0>\n\n    def __call__(self, entity: T) -> R:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x000001D8B8BD21D0>\n\n>       'send keys', lambda element: element().send_keys(*value)\n    )\n\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:467: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"f03662e5ffdb59337a3026925766e77f\", element=\"a1c66e12-42ac-4672-9ad4-a593d0e7e73c\")>\nvalue = ('D:\\\\lesson_5\\\\test/test/pictures/if-and-if-else.png',)\nlocal_files = [None]\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(\n                map(\n                    lambda keys_to_send: self.parent.file_detector.is_local_file(str(keys_to_send)),\n                    \"\".join(map(str, value)).split(\"\\n\"),\n                )\n            )\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = \"\\n\".join(remote_files)\n    \n>       self._execute(\n            Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        )\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:230: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"f03662e5ffdb59337a3026925766e77f\", element=\"a1c66e12-42ac-4672-9ad4-a593d0e7e73c\")>\ncommand = 'sendKeysToElement'\nparams = {'id': 'a1c66e12-42ac-4672-9ad4-a593d0e7e73c', 'text': 'D:\\\\lesson_5\\\\test/test/pictures/if-and-if-else.png', 'value': ['D', ':', '\\\\', 'l', 'e', 's', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"f03662e5ffdb59337a3026925766e77f\")>\ndriver_command = 'sendKeysToElement'\nparams = {'id': 'a1c66e12-42ac-4672-9ad4-a593d0e7e73c', 'text': 'D:\\\\lesson_5\\\\test/test/pictures/if-and-if-else.png', 'value': ['D', ':', '\\\\', 'l', 'e', 's', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D8B8598450>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : D:\\\\\\\\les...\\\\n#16 0x55d02311bb08 \\\\u003Cunknown>\\\\n#17 0x55d0231355dd \\\\u003Cunknown>\\\\n#18 0x7fb748488609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : D:\\lesson_5\\test/test/pictures/if-and-if-else.png\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x55d0230b8013 <unknown>\nE       #1 0x55d022e1aa08 <unknown>\nE       #2 0x55d022e49dd6 <unknown>\nE       #3 0x55d022e6e932 <unknown>\nE       #4 0x55d022e456d3 <unknown>\nE       #5 0x55d022e6ea3e <unknown>\nE       #6 0x55d022e81b94 <unknown>\nE       #7 0x55d022e6e823 <unknown>\nE       #8 0x55d022e4408a <unknown>\nE       #9 0x55d022e451e5 <unknown>\nE       #10 0x55d0230e5e5d <unknown>\nE       #11 0x55d0230ff061 <unknown>\nE       #12 0x55d0230e7bb5 <unknown>\nE       #13 0x55d0230ffe08 <unknown>\nE       #14 0x55d0230db2f0 <unknown>\nE       #15 0x55d02311b988 <unknown>\nE       #16 0x55d02311bb08 <unknown>\nE       #17 0x55d0231355dd <unknown>\nE       #18 0x7fb748488609 <unknown>\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\nopen_browser = None\n\n    @allure.tag('web')\n    @allure.label('owner', 'AironWarren')\n    @allure.story('User authorization')\n    @allure.link('https://demoqa.com/automation-practice-form', name='Testing')\n    def test_student_registration_form(open_browser):\n        # removing ads\n    \n        registration_page = RegistrationPage()\n    \n        registration_page.removing_banners()\n    \n        # WHEN\n        # the desired siteh\n        registration_page.check_title('DEMOQA')\n    \n        # user initials\n        registration_page.fill_first_name(student_registration_form['first_name'])\n        registration_page.fill_last_name(student_registration_form['last_name'])\n        registration_page.fill_email(student_registration_form['email'])\n    \n        # gender\n        registration_page.choose_gender(student_registration_form['gender'])\n    \n        # userNumber\n        registration_page.fill_phone_number(student_registration_form['phone_number'])\n    \n        # dateOfBirthInput\n        registration_page.fill_in_the_date_of_birth(student_registration_form['date_of_birth']['month'],\n                                                    student_registration_form['date_of_birth']['year'],\n                                                    student_registration_form['date_of_birth']['day'])\n    \n        # subjects\n        registration_page.fill_user_subjects(*student_registration_form['subjects'])\n    \n        # choosing a hobby\n        registration_page.choose_hobby(student_registration_form['hobby'])\n    \n        # uploading an image\n>       registration_page.upload_picture(file)\n\ntest_automation_practice_form.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\demoqa_tests\\Form_registration.py:64: in upload_picture\n    browser.element(\"#uploadPicture\").send_keys(file)\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:466: in send_keys\n    self.wait.command(\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:158: in command\n    self.for_(Command(description, fn))\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:147: in for_\n    return _(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x000001D8B8BD3250>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n    \n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#uploadPicture')).send keys\nE                   \nE                   Reason: InvalidArgumentException: Message: invalid argument: File not found : D:\\lesson_5\\test/test/pictures/if-and-if-else.png\nE                     (Session info: chrome=100.0.4896.60)\nE                   Stacktrace:\nE                   #0 0x55d0230b8013 <unknown>\nE                   #1 0x55d022e1aa08 <unknown>\nE                   #2 0x55d022e49dd6 <unknown>\nE                   #3 0x55d022e6e932 <unknown>\nE                   #4 0x55d022e456d3 <unknown>\nE                   #5 0x55d022e6ea3e <unknown>\nE                   #6 0x55d022e81b94 <unknown>\nE                   #7 0x55d022e6e823 <unknown>\nE                   #8 0x55d022e4408a <unknown>\nE                   #9 0x55d022e451e5 <unknown>\nE                   #10 0x55d0230e5e5d <unknown>\nE                   #11 0x55d0230ff061 <unknown>\nE                   #12 0x55d0230e7bb5 <unknown>\nE                   #13 0x55d0230ffe08 <unknown>\nE                   #14 0x55d0230db2f0 <unknown>\nE                   #15 0x55d02311b988 <unknown>\nE                   #16 0x55d02311bb08 <unknown>\nE                   #17 0x55d0231355dd <unknown>\nE                   #18 0x7fb748488609 <unknown>\nE                   \nE                   Screenshot: file://C:\\Users\\Airon\\.selene\\screenshots\\1680408523604\\1680408523605.png\nE                   PageSource: file://C:\\Users\\Airon\\.selene\\screenshots\\1680408523604\\1680408523605.html\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:145: TimeoutException"}, "steps": [{"name": "Removing banners", "status": "passed", "start": 1680408532676, "stop": 1680408533164}, {"name": "Checking the page name", "status": "passed", "parameters": [{"name": "title", "value": "'DEMOQA'"}], "start": 1680408533164, "stop": 1680408533264}, {"name": "Fill in firstName", "status": "passed", "parameters": [{"name": "name", "value": "'Slava'"}], "start": 1680408533264, "stop": 1680408533952}, {"name": "Fill in lastName", "status": "passed", "parameters": [{"name": "surname", "value": "'Komesarenko'"}], "start": 1680408533952, "stop": 1680408534540}, {"name": "Fill in userEmail", "status": "passed", "parameters": [{"name": "email", "value": "'Kslavon345@gmail.ru'"}], "start": 1680408534555, "stop": 1680408535157}, {"name": "Fill in gender", "status": "passed", "parameters": [{"name": "gender", "value": "'Female'"}], "start": 1680408535157, "stop": 1680408535373}, {"name": "Fill in userNumber", "status": "passed", "parameters": [{"name": "phone_number", "value": "'9138761122'"}], "start": 1680408535373, "stop": 1680408535991}, {"name": "Choosing the date of birth", "status": "passed", "parameters": [{"name": "month", "value": "'December'"}, {"name": "year", "value": "'2007'"}, {"name": "day", "value": "2"}], "start": 1680408535991, "stop": 1680408536996}, {"name": "Fill in user subjects", "status": "passed", "parameters": [{"name": "args", "value": "('Maths', 'English')"}], "start": 1680408536996, "stop": 1680408538805}, {"name": "Choosing the hobby", "status": "passed", "parameters": [{"name": "hobby", "value": "'Music'"}], "start": 1680408538805, "stop": 1680408539308}, {"name": "Uploading a picture", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: Message: invalid argument: File not found : D:\\lesson_5\\test/test/pictures/if-and-if-else.png\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55d0230b8013 <unknown>\n#1 0x55d022e1aa08 <unknown>\n#2 0x55d022e49dd6 <unknown>\n#3 0x55d022e6e932 <unknown>\n#4 0x55d022e456d3 <unknown>\n#5 0x55d022e6ea3e <unknown>\n#6 0x55d022e81b94 <unknown>\n#7 0x55d022e6e823 <unknown>\n#8 0x55d022e4408a <unknown>\n#9 0x55d022e451e5 <unknown>\n#10 0x55d0230e5e5d <unknown>\n#11 0x55d0230ff061 <unknown>\n#12 0x55d0230e7bb5 <unknown>\n#13 0x55d0230ffe08 <unknown>\n#14 0x55d0230db2f0 <unknown>\n#15 0x55d02311b988 <unknown>\n#16 0x55d02311bb08 <unknown>\n#17 0x55d0231355dd <unknown>\n#18 0x7fb748488609 <unknown>\n\nScreenshot: file://C:\\Users\\Airon\\.selene\\screenshots\\1680408523604\\1680408523605.png\nPageSource: file://C:\\Users\\Airon\\.selene\\screenshots\\1680408523604\\1680408523605.html\n\n", "trace": "  File \"D:\\lesson_5\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"D:\\lesson_5\\demoqa_tests\\Form_registration.py\", line 64, in upload_picture\n    browser.element(\"#uploadPicture\").send_keys(file)\n  File \"D:\\lesson_5\\venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 466, in send_keys\n    self.wait.command(\n  File \"D:\\lesson_5\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 158, in command\n    self.for_(Command(description, fn))\n  File \"D:\\lesson_5\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 147, in for_\n    return _(fn)\n           ^^^^^\n  File \"D:\\lesson_5\\venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 145, in _\n    raise self._hook_failure(failure)\n"}, "parameters": [{"name": "file", "value": "'D:\\lesson_5\\test/test/pictures/if-and-if-else.png'"}], "start": 1680408539308, "stop": 1680408544197}], "start": 1680408532676, "stop": 1680408544212, "uuid": "9b6a61ab-e888-4bd4-ac8f-628a2666ab1f", "historyId": "b253e6605dab3351fe602f70109fbc58", "testCaseId": "25c3d203095573fbf9aa1f9caa9e5b0d", "fullName": "test.test_automation_practice_form#test_student_registration_form", "labels": [{"name": "story", "value": "User authorization"}, {"name": "tag", "value": "web"}, {"name": "owner", "value": "AironWarren"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_automation_practice_form"}, {"name": "host", "value": "DESKTOP-JTA0U69"}, {"name": "thread", "value": "8880-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_automation_practice_form"}], "links": [{"type": "link", "url": "https://demoqa.com/automation-practice-form", "name": "Testing"}]}