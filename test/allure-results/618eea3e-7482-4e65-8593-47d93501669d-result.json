{"name": "test_student_registration_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.table')).all(('css selector', 'td'))[1::2].has exact texts ('Slava Komesarenko', 'Kslavon345@gmail.ru', 'Female', '9138761122', '02 December,2007', 'Maths, English', 'Music', 'D:\\\\lesson_5\\\\test\\\\pictures\\\\if-and-if-else.png', 'Moskovskaya street 15', 'Haryana Karnal')\n\nReason: AssertionError: actual visible_texts: ['Slava Komesarenko', 'Kslavon345@gmail.ru', 'Female', '9138761122', '02 December,2007', 'Maths, English', 'Music', 'if-and-if-else.png', 'Moskovskaya street 15', 'Haryana Karnal']\nScreenshot: file://C:\\Users\\Airon\\.selene\\screenshots\\1680703446042\\1680703446043.png\nPageSource: file://C:\\Users\\Airon\\.selene\\screenshots\\1680703446042\\1680703446043.html", "trace": "fn = <selene.core.conditions.CollectionCondition object at 0x000002596E438F50>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:122: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.conditions.CollectionCondition object at 0x000002596E438F50>\nentity = <selene.core.entity.Collection object at 0x000002596E43AAD0>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Collection object at 0x000002596E43AAD0>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__\n            if query_to_str.startswith('<function')\n            else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual visible_texts: ['Slava Komesarenko', 'Kslavon345@gmail.ru', 'Female', '9138761122', '02 December,2007', 'Maths, English', 'Music', 'if-and-if-else.png', 'Moskovskaya street 15', 'Haryana Karnal']\n\n..\\venv\\Lib\\site-packages\\selene\\core\\condition.py:147: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nopen_browser = None\n\n    def test_student_registration_form(open_browser):\n        # removing ads\n        registration_page = RegistrationPage()\n    \n        registration_page.removing_banners()\n    \n        # WHEN\n        registration_page.registration_form(student)\n        # THEN\n        # checking the completed form\n        registration_page.check_name_modal_contest()\n    \n>       registration_page.assert_registered_user_info(student)\n\ntest_automation_practice_form.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\demoqa_tests\\Form_registration.py:98: in assert_registered_user_info\n    browser.element('.table').all('td').even.should(\n..\\venv\\Lib\\site-packages\\selene\\core\\entity.py:1088: in should\n    self.wait.for_(condition)\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:147: in for_\n    return _(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.CollectionCondition object at 0x000002596E438F50>\n\n    @self._decorator(self)\n    def _(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n    \n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # todo: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.table')).all(('css selector', 'td'))[1::2].has exact texts ('Slava Komesarenko', 'Kslavon345@gmail.ru', 'Female', '9138761122', '02 December,2007', 'Maths, English', 'Music', 'D:\\\\lesson_5\\\\test\\\\pictures\\\\if-and-if-else.png', 'Moskovskaya street 15', 'Haryana Karnal')\nE                   \nE                   Reason: AssertionError: actual visible_texts: ['Slava Komesarenko', 'Kslavon345@gmail.ru', 'Female', '9138761122', '02 December,2007', 'Maths, English', 'Music', 'if-and-if-else.png', 'Moskovskaya street 15', 'Haryana Karnal']\nE                   Screenshot: file://C:\\Users\\Airon\\.selene\\screenshots\\1680703446042\\1680703446043.png\nE                   PageSource: file://C:\\Users\\Airon\\.selene\\screenshots\\1680703446042\\1680703446043.html\n\n..\\venv\\Lib\\site-packages\\selene\\core\\wait.py:145: TimeoutException"}, "attachments": [{"name": "stderr", "source": "03c15263-41df-43cc-85cb-e9ec74668a20-attachment.txt", "type": "text/plain"}], "start": 1680703463227, "stop": 1680703471355, "uuid": "b56c1fb7-754d-481e-b005-8c5d62611f52", "historyId": "487daffa45da0c09421f47bb0f51e55a", "testCaseId": "d4d3682e1f60aebb25adfaa77b52be36", "fullName": "test_automation_practice_form#test_student_registration_form", "labels": [{"name": "suite", "value": "test_automation_practice_form"}, {"name": "host", "value": "DESKTOP-JTA0U69"}, {"name": "thread", "value": "10852-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_automation_practice_form"}]}